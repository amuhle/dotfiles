filetype off

set shell=zsh
"set list
set mouse=a
filetype plugin indent on

call plug#begin('~/.config/nvim/plugged')

Plug 'benekastah/neomake'
Plug 'kien/ctrlp.vim'
Plug 'junegunn/vim-easy-align'
Plug 'mileszs/ack.vim'

"Intellisense
Plug 'hrsh7th/nvim-compe'

" Collection of common configurations for the Nvim LSP client
Plug 'neovim/nvim-lspconfig'

" Extensions to built-in LSP, for example, providing type inlay hints
Plug 'nvim-lua/lsp_extensions.nvim'

" Autocompletion framework for built-in LSP
Plug 'nvim-lua/completion-nvim'

"Hyperfocus-writing in vim
Plug 'junegunn/limelight.vim'

"Plug 'autozimu/LanguageClient-neovim', {
    "\ 'branch': 'next',
    "\ 'do': 'bash install.sh',
    "\ }

"" Required for operations modifying multiple buffers like rename.
"set hidden

"let g:LanguageClient_serverCommands = {
    "\ 'rust': ['~/.cargo/bin/rustup', 'run', 'stable', 'rls'],
    "\ 'javascript': ['/usr/local/bin/javascript-typescript-stdio'],
    "\ 'javascript.jsx': ['tcp://127.0.0.1:2089'],
    "\ 'python': ['/usr/local/bin/pyls'],
    "\ 'ruby': ['~/.rbenv/shims/solargraph', 'stdio'],
    "\ }

if executable("rg")
  set grepprg=rg\ --vimgrep\ --no-heading
  set grepformat=%f:%l:%c:%m,%f:%l:%m
endif

"Fuzzy Finder - Works fine for linux, not sure for macosx
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

Plug 'matze/vim-move'
Plug 'Quramy/tsuquyomi'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'Shougo/vimproc.vim'
Plug 'leafgarland/typescript-vim'
Plug 'terryma/vim-multiple-cursors'
Plug 'vim-ruby/vim-ruby'
Plug 'ecomba/vim-ruby-refactoring'
Plug 'sunaku/vim-ruby-minitest'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-rake'
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-surround'
Plug 'vim-scripts/vim-stylus'
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-airline/vim-airline'
Plug 'sgur/vim-lazygutter'
Plug 'digitaltoad/vim-pug'
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'
Plug 'scrooloose/syntastic'
Plug 'jelera/vim-javascript-syntax'
Plug 'pangloss/vim-javascript'
Plug 'crusoexia/vim-javascript-lib'
Plug 'vitalk/vim-simple-todo'
Plug 'lsdr/monokai'
Plug 'lifepillar/vim-solarized8'
Plug 'crusoexia/vim-monokai'
Plug 'sheerun/vim-polyglot'
Plug 'janko-m/vim-test'
Plug 'mattn/emmet-vim'
Plug 'Raimondi/delimitMate'
Plug 'alvan/vim-closetag'
Plug 'tpope/vim-endwise'
Plug 'rstacruz/sparkup'
Plug 'jiangmiao/auto-pairs'
Plug 'hail2u/vim-css3-syntax'
Plug 'isRuslan/vim-es6'
"Plug 'justinj/vim-react-snippets'
Plug 'burnettk/vim-angular'
""""snippets
"Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'garbas/vim-snipmate'
"Plug 'ervandew/supertab'
Plug 'rizzatti/dash.vim'
Plug 'dkprice/vim-easygrep'
"Plug 'posva/vim-vue'
"Plug 'airblade/vim-gitgutter'
"Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'rust-lang/rust.vim'

function! DoRemote(arg)
  UpdateRemotePlugins
endfunction

Plug 'Shougo/deoplete.nvim', { 'do': function('DoRemote') }
"Plug 'nikvdp/ejs-syntax'

call plug#end()

"VimFiles:
source ~/.config/nvim/vim/lsp-config.vim

"LuaFiles:
luafile ~/.config/nvim/lua/plugins/compe-config.lua
luafile ~/.config/nvim/lua/lsp/rust-ls.lua

" Use <Tab> and <S-Tab> to navigate through popup menu
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" use <Tab> as trigger keys
imap <Tab> <Plug>(completion_smart_tab)
imap <S-Tab> <Plug>(completion_smart_s_tab)

set showcmd
set nowrap
set expandtab
set shiftwidth=2
set tabstop=2
set backspace=indent,eol,start
set clipboard=unnamedplus
let g:NERDTreeWinPos = "right"

set smartcase
set autoindent
set smartindent

set sw=2
set ts=2

set guifont=Hack:h13
syntax on
set termguicolors
"colorscheme solarized8_light_low
colorscheme monokai
"colorscheme pyte
"set background=light
set t_Co=256  " vim-monokai now only support 256 colours in terminal.
"gui colors if running iTerm

set nobackup
set nowritebackup
set noswapfile

set relativenumber

" Leader key
let mapleader = ","

" Remove trailing whitespace
autocmd BufWritePre * :%s/\s\+$//e

" Tabs Mapping
map <C-t> :tabnew<CR>

" Tabs Mapping
nnoremap <leader>f :Ag<Space>

" Don't be stupid!
"noremap <Up> <NOP>
"noremap <Down> <NOP>
"noremap <Left> <NOP>
"noremap <Right> <NOP>

" Default mapping
let g:multi_cursor_start_word_key      = '<C-m>'
let g:multi_cursor_select_all_word_key = '<A-n>'
let g:multi_cursor_start_key           = 'g<C-m>'
let g:multi_cursor_select_all_key      = 'g<A-n>'
let g:multi_cursor_next_key            = '<C-m>'
let g:multi_cursor_prev_key            = '<C-p>'
let g:multi_cursor_skip_key            = '<C-x>'
let g:multi_cursor_quit_key            = '<Esc>'

let g:multi_cursor_use_default_mapping=0

" NERD Mappings
map <C-n> :NERDTreeToggle<CR>
nmap <leader>n :NERDTreeFind<CR>

" Airline settings
let g:airline_powerline_fonts = 1
let g:Powerline_symbols = 'fancy'

" Identline settings
let g:indentLine_enabled = 0

" Move lines
let g:move_key_modifier = 'C'

"Javascript
let g:jsx_ext_required = 0
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_javascript_checkers = ['jsxhint']
let g:syntastic_javascript_jsxhint_exec = 'jsx-jshint-wrapper'

"let g:SuperTabDefaultCompletionType = '<C-n>'

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

" Add empty lines without entering normal mode
map <leader>o o<Esc>
map <leader>O O<Esc>

" fzf mappings
map <leader>gf :GitFiles<CR>
map <leader>gc :Commits<CR>
map <leader>/ :Lines<CR>
map <leader>b :Buffers<CR>
map <leader><leader> :Files<CR>
map <leader>\ :BLines<CR>

" Bind commands
command! Q q " Bind :Q to :q
command! Qall qall
command! QA qall
command! E e
command! W w
command! Wq wq

" Make < > shifts keep selection
vnoremap < <gv
vnoremap > >gv

command Greview :Git! diff --staged
nnoremap <leader>gr :Greview<cr>

" Copy & Paste
function! ClipboardYank()
  call system('pbcopy', @@)
endfunction
function! ClipboardPaste()
  let @@ = system('pbpaste')
endfunction

vnoremap <silent> y y:call ClipboardYank()<cr>
vnoremap <silent> d d:call ClipboardYank()<cr>
nnoremap <silent> p :call ClipboardPaste()<cr>p

"#Minitest completion
set completefunc=syntaxcomplete#Complete
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags

"Refactoring
:nnoremap <leader>rap  :RAddParameter<cr>
:nnoremap <leader>rcpc :RConvertPostConditional<cr>
:nnoremap <leader>rel  :RExtractLet<cr>
:vnoremap <leader>rec  :RExtractConstant<cr>
:vnoremap <leader>relv :RExtractLocalVariable<cr>
:nnoremap <leader>rit  :RInlineTemp<cr>
:vnoremap <leader>rrlv :RRenameLocalVariable<cr>
:vnoremap <leader>rriv :RRenameInstanceVariable<cr>
:vnoremap <leader>rem  :RExtractMethod<cr>

"TEST
nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
nmap <silent> <leader>a :TestSuite<CR>
nmap <silent> <leader>l :TestLast<CR>
nmap <silent> <leader>g :TestVisit<CR>


"LimeLight config
nmap <Leader>l <Plug>(Limelight)
xmap <Leader>l <Plug>(Limelight)

"Improves performance when scrolling on big files
set lazyredraw
set regexpengine=1
