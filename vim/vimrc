filetype off
set shell=zsh
set list
set mouse=a
filetype plugin indent on

" Having longer updatetime (default is 4000 ms = 4s ) leads to noticeable
" delays and poor user experience
set updatetime=300

" ===== PLUGINS =====
call plug#begin('~/.config/nvim/plugged')

" === Vim enhancements ===
"
" To asynchronously run programs
Plug 'neomake/neomake'
" Finder
Plug 'ctrlpvim/ctrlp.vim'
" Hyperfocus-writing in vim
Plug 'junegunn/limelight.vim'
" Fuzzy Finder - Works fine for linux, not sure for macosx
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
" Move lines Ctrl + jkhl
Plug 'matze/vim-move'
" Comments blocks
Plug 'scrooloose/nerdcommenter'
" Shows files tree
Plug 'scrooloose/nerdtree'
" Async execution library
Plug 'Shougo/vimproc.vim'
" Multiple cursors (C-d)
Plug 'mg979/vim-visual-multi'
" Git support (:G)
Plug 'tpope/vim-fugitive'
" Opens file on Github
Plug 'tpope/vim-rhubarb'
" All about surrundings: parentheses, brackets, quotes, tags, etc.
Plug 'tpope/vim-surround'
" Airline theme
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-airline/vim-airline'
" Git diff on a file (what lines have been modified)
Plug 'sgur/vim-lazygutter'

" === Utils ===
"
" Todo lists (Adds some mappings)
Plug 'vitalk/vim-simple-todo'
" Monokai theme
Plug 'lsdr/monokai'
Plug 'crusoexia/vim-monokai'
" Automatic closing of quotes, parenthesis, brackets, etc.
Plug 'Raimondi/delimitMate'
" Helps to end certain structures automatically.
Plug 'tpope/vim-endwise'
" Insert or delete brackets, parens, quotes in pairs
Plug 'jiangmiao/auto-pairs'
" Track the snippets engine
Plug 'SirVer/ultisnips'
" Snippets are separated from the engine
Plug 'honza/vim-snippets'
" Find and replace across multiple files
Plug 'dkprice/vim-easygrep'
" Dark powered async completion framework
function! DoRemote(arg)
  UpdateRemotePlugins
endfunction
Plug 'Shougo/deoplete.nvim', { 'do': function('DoRemote') }

" === Languages Support ===
"
" Powerful completion engine
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Asynchronouse Lint Engine
Plug 'dense-analysis/ale'
" Ruby language support [syntax highlight, indendation, completion, ,etc.]
Plug 'vim-ruby/vim-ruby'
" Javascript Language
Plug 'jelera/vim-javascript-syntax'
Plug 'pangloss/vim-javascript'
Plug 'crusoexia/vim-javascript-lib'
" Javascript ES6
Plug 'isRuslan/vim-es6'
"Intellisense
Plug 'hrsh7th/nvim-compe'
" Async Language Server Protocol Plugin
Plug 'prabirshrestha/vim-lsp'
" Collection of common configurations for the Nvim LSP client
Plug 'neovim/nvim-lspconfig'
" Extensions to built-in LSP, for example, providing type inlay hints
Plug 'nvim-lua/lsp_extensions.nvim'
" Autocompletion framework for built-in LSP
Plug 'nvim-lua/completion-nvim'
" Rust file detection, syntax highlighting, formatting,
Plug 'rust-lang/rust.vim'
" Rust tools
Plug 'simrat39/rust-tools.nvim'
" A collection of language packs
Plug 'sheerun/vim-polyglot'
" Run tests for different languages/frameworks
Plug 'janko-m/vim-test'
" Web development (html)
Plug 'mattn/emmet-vim'
" Lets you write HTML code faster
Plug 'rstacruz/sparkup'

call plug#end()
" ===== END PLUGINS =====

" Required for operations modifying multiple buffers like rename.
set hidden

if executable("rg")
  set grepprg=rg\ --vimgrep\ --no-heading
  set grepformat=%f:%l:%c:%m,%f:%l:%m
endif

"Rust config
let g:rustfmt_autosave = 1
let g:rustfmt_emit_files = 1
let g:rustfmt_fail_silently = 0

"CoC config
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction


"VimFiles:
source ~/.config/nvim/vim/lsp-config.vim

"LuaFiles:
luafile ~/.config/nvim/lua/plugins/compe-config.lua
luafile ~/.config/nvim/lua/lsp/rust-ls.lua

" Use <Tab> and <S-Tab> to navigate through popup menu
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" use <Tab> as trigger keys
imap <Tab> <Plug>(completion_smart_tab)
imap <S-Tab> <Plug>(completion_smart_s_tab)

" Set completeopt to have a better completion experience
" :help completeopt
" menuone: popup even when there's only one match
" noinsert: Do not insert text until a selection is made
" noselect: Do not select, force user to select one from the menu
set completeopt=menuone,noinsert,noselect

" Code navigation shortcuts
nnoremap <silent> <c-]> <cmd>lua vim.lsp.buf.definition()<CR>
nnoremap <silent> K     <cmd>lua vim.lsp.buf.hover()<CR>
nnoremap <silent> gD    <cmd>lua vim.lsp.buf.implementation()<CR>
nnoremap <silent> <c-k> <cmd>lua vim.lsp.buf.signature_help()<CR>
nnoremap <silent> 1gD   <cmd>lua vim.lsp.buf.type_definition()<CR>
nnoremap <silent> gr    <cmd>lua vim.lsp.buf.references()<CR>
nnoremap <silent> g0    <cmd>lua vim.lsp.buf.document_symbol()<CR>
nnoremap <silent> gW    <cmd>lua vim.lsp.buf.workspace_symbol()<CR>
nnoremap <silent> gd    <cmd>lua vim.lsp.buf.declaration()<CR>

set showcmd
set nowrap
set expandtab
set shiftwidth=2
set tabstop=2
set backspace=indent,eol,start
set clipboard=unnamedplus
let g:NERDTreeWinPos = "right"

set smartcase
set autoindent
set smartindent

set sw=2
set ts=2

set guifont=Hack:h14
syntax on
set termguicolors
colorscheme monokai
set t_Co=256  " vim-monokai now only support 256 colours in terminal.

set nobackup
set nowritebackup
set noswapfile

set relativenumber

" Leader key
let mapleader = ","

" Remove trailing whitespace
autocmd BufWritePre * :%s/\s\+$//e

" Tabs Mapping
map <C-t> :tabnew<CR>

" Tabs Mapping
nnoremap <leader>f :Ag<Space>

" NERD Mappings
map <C-n> :NERDTreeToggle<CR>
nmap <leader>n :NERDTreeFind<CR>

" Limelight toggle
nmap <Leader>l <Plug>(Limelight)
xmap <Leader>l <Plug>(Limelight)

" Airline settings
let g:airline_powerline_fonts = 1
let g:Powerline_symbols = 'fancy'

" Identline settings
let g:indentLine_enabled = 0

" Move lines
let g:move_key_modifier = 'C'

"Javascript
let g:jsx_ext_required = 0
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_javascript_checkers = ['jsxhint']
let g:syntastic_javascript_jsxhint_exec = 'jsx-jshint-wrapper'

"let g:SuperTabDefaultCompletionType = '<C-n>'

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

" Add empty lines without entering normal mode
map <leader>o o<Esc>
map <leader>O O<Esc>

" fzf mappings
map <leader>gf :GitFiles<CR>
map <leader>gc :Commits<CR>
map <leader>/ :Lines<CR>
map <leader>b :Buffers<CR>
map <leader><leader> :Files<CR>
map <leader>\ :BLines<CR>

" Bind commands
command! Q q " Bind :Q to :q
command! Qall qall
command! QA qall
command! E e
command! W w
command! Wq wq

" Make < > shifts keep selection
vnoremap < <gv
vnoremap > >gv

command Greview :Git! diff --staged
nnoremap <leader>gr :Greview<cr>

" Copy & Paste
function! ClipboardYank()
  call system('pbcopy', @@)
endfunction
function! ClipboardPaste()
  let @@ = system('pbpaste')
endfunction

vnoremap <silent> y y:call ClipboardYank()<cr>
vnoremap <silent> d d:call ClipboardYank()<cr>
nnoremap <silent> p :call ClipboardPaste()<cr>p

"#Minitest completion
set completefunc=syntaxcomplete#Complete
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
"
" Use ALE and also some plugin 'foobar' as completion sources for all code.
"call deoplete#custom#option('sources', {
"\ '_': ['ale'],
"\})

filetype plugin on
"set omnifunc=ale#completion#OmniFunc
set omnifunc=syntaxcomplete#Complete

"TEST
nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
nmap <silent> <leader>a :TestSuite<CR>

"Improves performance when scrolling on big files
set lazyredraw
set regexpengine=1

let g:VM_maps = {}
let g:VM_maps['Find Under']         = '<C-d>'           " replace C-n
let g:VM_maps['Find Subword Under'] = '<C-d>'           " replace visual C-n
